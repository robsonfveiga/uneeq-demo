---
description: You are a senior fullstack developer specialized to create a WebSocket-based, real-time transcription application using Google Speech-to-Text.
globs: 
---
# Master Application Rules for Real-Time Transcription
You are a senior developer and your job is create a WebSocket-based, real-time transcription application using Google Speech-to-Text.

# Error Known 
To prevent JSON unmarshaling errors of audio data, ensure the client sends audio chunks as base64-encoded strings rather than raw binary data, and validate the encoding format before processing.

# Rules

## Purpose & Consistency
- **Goal:** Capture, transmit, and transcribe live audio using WebSockets + Google Speech-to-Text.  
- **API Contract:** Keep a versioned schema for frontend ↔ backend communication; document all changes.

---

## Key Requirements
1. **Audio Format:**  
   - **Codec:** WebM/Opus  
   - **Sample Rate:** 48 kHz  
   - **Chunking:** Send small audio segments, 400ms.  
   - **End-of-Stream:** Send an explicit termination signal (“END_OF_STREAM”) when the user stops recording.
   - **For Transfer** Use base64 encoding

2. **Logging:**  
   - **Events:** Connection (connect/disconnect), audio chunks (size, timestamp), errors, stream stop.  
   - **Frontend:** When connect, disconnect, record, stop record, etc...

3. **Stream Lifecycle:**  
   - **Initiation:** Start transcription when audio data arrives.  
   - **Processing:** Handle partial/final transcription with Google Speech-to-Text.  
   - **Termination:** After the last chunk ensure proper cleanup in server

4. **User Feedback & Reliability:**  
   - **Frontend:** Show status (“Listening…”, “Connection lost…”) and display updated transcripts in real time.  
   - **Backend:** Handle connection drops, apply timeouts/retries, and clean up unused resources.

5. **Stream lifecycle management**
   - Push-to-talk start/stop cycles
   - Connection drops and reconnects
   - Long periods of inactivity
   - Stream timeouts and restarts
   - Resource cleanup
   - Be sure STT stream is not closed if we are still trying to send audio data. 

---

## Frontend (React + TypeScript)
1. **Audio Capture:**  
   - Record mic input as WebM/Opus at 48 kHz.  
   - Log each audio chunk before sending (size, timestamp).

2. **WebSocket Transmission:**  
   - Continuously send chunks to the backend.  
   - When user stops: send “END_OF_STREAM”, stop recording and stop to send data to the server. 

3. **UI & Logging:**  
   - Show partial/final transcriptions.  
   - In the frontend, display the interim transcription only if the new one is longer than the previous one. 
   - When the final transcription is received, start a new line.
   - Visually indicate connection status and errors.  

---

## Backend - Server (Go)
1. **Project Structure:**  
   - Organize all server code in a `server` folder.  
   - Use goroutines/channels for concurrent streams.
   - Split the services in diferent files.

2. **WebSocket Management:**  
   - Log connections/disconnections with client ID/timestamp.  
   - Receive audio chunks, forward them to Google Speech-to-Text.

3. **Transcription Handling:**  
   - Return both interim and final transcripts to the correct client.  
   - Upon “END_OF_STREAM,” finalize transcription and stop receiving audio.

4. **Error & Timeout Handling:**  
   - Implement retries and exponential backoff for connection or API failures.  
   - Clean up idle or failed connections gracefully.
   
5. **Google Speech-to-Text**
   - Do not use key, server is already logged using gcloud auth login.
   - Ensure proper cleanup.
   - Be sure that you will correctly manage the Stream Cycle based on the frontend actions.

---

## Monitoring & UX Enhancements
- **Monitoring:** Track metrics (latency, errors) in real time.  
- **Fallback Logic:** Provide reconnection attempts or alternate services if Google Speech-to-Text is unavailable.  
- **Responsive UI:** Keep the application interactive even during errors or reconnection.

---

## Libs to Use
- [Google Cloud Speech API (Go)](mdc:https:/pkg.go.dev/cloud.google.com/go/speech/apiv1/speechpb)
ion or error events.